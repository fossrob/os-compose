from typing import Any, ClassVar, Dict

import libcomps
MATCH_IGNORECASE: int
PACKAGE_TYPE_CONDITIONAL: int
PACKAGE_TYPE_DEFAULT: int
PACKAGE_TYPE_MANDATORY: int
PACKAGE_TYPE_OPTIONAL: int
PACKAGE_TYPE_UNKNOWN: int

class Blacklist(libcomps.MDict): ...

class Category:
    desc: Any
    desc_by_lang: Any
    display_order: Any
    group_ids: Any
    id: Any
    name: Any
    name_by_lang: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __radd__(self, other) -> Any: ...

class CategoryList(libcomps.Sequence):
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __radd__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> None: ...

class Comps:
    __hash__: ClassVar[None] = ...
    blacklist: Any
    categories: Any
    environments: Any
    groups: Any
    langpacks: Any
    whiteout: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def arch_filter(self, arch_list) -> libcomps.Comps: ...
    def categories_match(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def environments_match(self, *args, **kwargs) -> Any: ...
    def fromxml_f(self, *args, **kwargs) -> Any: ...
    def fromxml_str(self, *args, **kwargs) -> Any: ...
    def get_last_errors(self, *args, **kwargs) -> Any: ...
    def get_last_log(self, *args, **kwargs) -> Any: ...
    def groups_match(self, *args, **kwargs) -> Any: ...
    def toxml_f(self, *args, **kwargs) -> Any: ...
    def toxml_str(self, *args, **kwargs) -> Any: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def validate_nf(self, *args, **kwargs) -> Any: ...
    def xml_f(self, *args, **kwargs) -> Any: ...
    def xml_str(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __radd__(self, other) -> Any: ...

class EnvList(libcomps.Sequence):
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __radd__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> None: ...

class Environment:
    desc: Any
    desc_by_lang: Any
    display_order: Any
    group_ids: Any
    id: Any
    name: Any
    name_by_lang: Any
    option_ids: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __radd__(self, other) -> Any: ...

class Group:
    biarchonly: Any
    default: Any
    desc: Any
    desc_by_lang: Any
    display_order: Any
    id: Any
    lang_only: Any
    name: Any
    name_by_lang: Any
    packages: Any
    uservisible: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def packages_match(self, *args, **kwargs) -> Any: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __radd__(self, other) -> Any: ...

class GroupId:
    default: Any
    name: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...

class GroupList(libcomps.Sequence):
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __radd__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> None: ...

class IdList(libcomps.Sequence):
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...

class Langpacks(libcomps.Dict): ...

class MDict:
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def get(self, key) -> listofstrings: ...
    def has_key(self, key) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def keys(self, *args, **kwargs) -> Any: ...
    def update(self, dict) -> None: ...
    def values(self, *args, **kwargs) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> bool: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __setitem__(self, index, object) -> None: ...

class Package:
    basearchonly: Any
    name: Any
    requires: Any
    type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...

class PackageList(libcomps.Sequence):
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __radd__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> None: ...

class ParserError(Exception): ...

class StrDict(libcomps.Dict):
    def __init__(self, *args, **kwargs) -> None: ...

class StrSeq(libcomps.Sequence):
    def __init__(self, *args, **kwargs) -> None: ...

class Whiteout(libcomps.MDict): ...

class XMLGenError(Exception): ...

def get_xml_default_options(*args, **kwargs) -> Any: ...
